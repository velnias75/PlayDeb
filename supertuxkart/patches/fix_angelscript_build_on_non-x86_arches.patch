Description: Fix FTBFS when building angelscript on non-x86 arches
Forwarded: https://github.com/supertuxkart/stk-code/pull/2211
Author: James Cowgill <james410@cowgill.org.uk>,
        Vincent Cheng <vcheng@debian.org>
Bug: https://github.com/supertuxkart/stk-code/issues/2194
Last-Update: 2015-06-03

Index: supertuxkart-0.9.1/lib/angelscript/projects/cmake/CMakeLists.txt
===================================================================
--- supertuxkart-0.9.1.orig/lib/angelscript/projects/cmake/CMakeLists.txt	2015-10-19 19:35:26.713499503 +0200
+++ supertuxkart-0.9.1/lib/angelscript/projects/cmake/CMakeLists.txt	2015-10-19 19:36:33.978853318 +0200
@@ -102,15 +102,6 @@
     endif()
 endif()
 
-if(ANDROID)
-    enable_language(ASM)
-    if(CMAKE_ASM_COMPILER_WORKS)
-        set(ANGELSCRIPT_SOURCE ${ANGELSCRIPT_SOURCE} ../../source/as_callfunc_arm.cpp ../../source/as_callfunc_arm_gcc.S)
-    else()
-        message(FATAL ERROR "Android target requires a working assembler")
-    endif()
-endif()
-
 include_directories(${CMAKE_CURRENT_SOURCE_DIR}/../../include)
 
 if(MSVC)
Index: supertuxkart-0.9.1/lib/angelscript/source/as_config.h
===================================================================
--- supertuxkart-0.9.1.orig/lib/angelscript/source/as_config.h	2015-10-19 19:35:26.713499503 +0200
+++ supertuxkart-0.9.1/lib/angelscript/source/as_config.h	2015-10-19 19:41:00.080461202 +0200
@@ -835,7 +835,7 @@
 			#define THISCALL_PASS_OBJECT_POINTER_ON_THE_STACK
 			#define AS_X86
 			#undef AS_NO_THISCALL_FUNCTOR_METHOD
-		#elif defined(__LP64__) && !defined(__arm64__)
+		#elif defined(__x86_64__)
 			#define AS_X64_GCC
 			#undef AS_NO_THISCALL_FUNCTOR_METHOD
 			#define HAS_128_BIT_PRIMITIVES
@@ -845,7 +845,7 @@
 			// STDCALL is not available on 64bit Linux
 			#undef STDCALL
 			#define STDCALL
-		#elif defined(__ARMEL__) || defined(__arm__)
+		#elif (defined(__ARMEL__) || defined(__arm__)) && !(defined(__ARM_ARCH_4__) || defined(__ARM_ARCH_4T__))
 			#define AS_ARM
 
 			// TODO: The stack unwind on exceptions currently fails due to the assembler code in as_callfunc_arm_gcc.S
Index: supertuxkart-0.9.1/lib/angelscript/source/as_callfunc_arm_gcc.S
===================================================================
--- supertuxkart-0.9.1.orig/lib/angelscript/source/as_callfunc_arm_gcc.S	2015-10-19 19:35:26.713499503 +0200
+++ supertuxkart-0.9.1/lib/angelscript/source/as_callfunc_arm_gcc.S	2015-10-19 19:35:26.709499424 +0200
@@ -85,7 +85,12 @@
     bne     stackargsloop
     mov     sp, r12
 nomoreargs:
+#if defined (__ARM_ARCH_4T__) || defined (__ARM_ARCH_4__)
+    mov    lr, pc   /* older ARM didn't support blx */
+    mov    pc, r4
+#else
     blx     r4
+#endif
     add     sp, sp, r8
     ldmia   sp!, {r4-r8, pc}
 
@@ -133,7 +138,12 @@
     bne     stackargslooparmFuncObjLast
     mov     sp, r12
 nomoreargsarmFuncObjLast:
+#if defined (__ARM_ARCH_4T__) || defined (__ARM_ARCH_4__)
+    mov    lr, pc   /* older ARM didn't support blx */
+    mov    pc, r4
+#else
     blx     r4
+#endif
     add     sp, sp, r8
     ldmia   sp!, {r4-r8, pc}
 
@@ -180,7 +190,12 @@
     bne     stackargslooparmFuncR0ObjLast
     mov     sp, r12
 nomoreargsarmFuncR0ObjLast:
+#if defined (__ARM_ARCH_4T__) || defined (__ARM_ARCH_4__)
+    mov    lr, pc   /* older ARM didn't support blx */
+    mov    pc, r4
+#else
     blx     r4
+#endif
     add     sp, sp, r8
     ldmia   sp!, {r4-r8, pc}
 
@@ -218,7 +233,12 @@
     bne     stackargslooparmFuncR0
     mov     sp, r12
 nomoreargsarmFuncR0:
+#if defined (__ARM_ARCH_4T__) || defined (__ARM_ARCH_4__)
+    mov    lr, pc   /* older ARM didn't support blx */
+    mov    pc, r4
+#else
     blx     r4
+#endif
     add     sp, sp, r8
     ldmia   sp!, {r4-r8, pc}
 
@@ -255,7 +275,12 @@
     bne     stackargslooparmFuncR0R1
     mov     sp, r12
 nomoreargsarmFuncR0R1:
+#if defined (__ARM_ARCH_4T__) || defined (__ARM_ARCH_4__)
+    mov    lr, pc   /* older ARM didn't support blx */
+    mov    pc, r4
+#else
     blx     r4
+#endif
     add     sp, sp, r8
     ldmia   sp!, {r4-r8, pc}
 
@@ -340,7 +365,7 @@
     mov     sp, r12
 
 nomoreargs:
-#if defined (___ARM_ARCH_4T__) || defined (__ARM_ARCH_4__)
+#if defined (__ARM_ARCH_4T__) || defined (__ARM_ARCH_4__)
     mov    lr, pc   /* older ARM didn't support blx */
     mov    pc, r4
 #else
@@ -427,7 +452,7 @@
     mov     sp, r12
 
 nomoreargsarmFuncObjLast:
-#if defined (___ARM_ARCH_4T__) || defined (__ARM_ARCH_4__)
+#if defined (__ARM_ARCH_4T__) || defined (__ARM_ARCH_4__)
     mov    lr, pc
     mov    pc, r4
 #else
@@ -521,7 +546,7 @@
     mov     sp, r12
 
 nomoreargsarmFuncR0ObjLast:
-#if defined (___ARM_ARCH_4T__) || defined (__ARM_ARCH_4__)
+#if defined (__ARM_ARCH_4T__) || defined (__ARM_ARCH_4__)
     mov    lr, pc
     mov    pc, r4
 #else
@@ -597,7 +622,7 @@
     mov     sp, r12
 
 nomoreargsarmFuncR0:
-#if defined (___ARM_ARCH_4T__) || defined (__ARM_ARCH_4__)
+#if defined (__ARM_ARCH_4T__) || defined (__ARM_ARCH_4__)
     mov    lr, pc
     mov    pc, r4
 #else
@@ -677,7 +702,7 @@
     mov     sp, r12
 
 nomoreargsarmFuncR0R1:
-#if defined (___ARM_ARCH_4T__) || defined (__ARM_ARCH_4__)
+#if defined (__ARM_ARCH_4T__) || defined (__ARM_ARCH_4__)
     mov    lr, pc
     mov    pc, r4
 #else
